"itertools.zip";"function zip(iter1, iter1) -> Iterable[Tuple[Any, Any]]"
"itertools.zip_longest";"function zip_longest(iter1, iter2, fill_value=None)"
"itertools.islice";"function islice(iterable, start, stop, step) (*with kind of weird placements), similar to slice operator for lists & tuples)"
"itertools.groupby -- common pitfall";"You didn't sort your data first."
"itertools.groupby";"function groupby(iterable: Iterable, key: Callable[..., Any])"
"itertools.takewhile";"function takewhile(filter_func: Callable[[value: Any], bool], iterable: Iterable)"
"itertools.dropwhile";"function dropwhile(filter_func: Callable[[value: Any], bool], iterable: Iterable)"
"itertools.chain";"Chain together two iterables";"function chain(iter_a, iter_b, ... iter_n)"
"itertools.chain.from_iterable";"Change together iterables already in an iterable";"function chain.from_iterable(iterable: Iterable[Iterable, ...])"
"itertools.tee";"Copy an iterable and return two iterators from it? Sort of confused why you would use it..."
"itertools.product";"Cartesian product for a gift list of iterables. equivalent of using nest for-loops"
